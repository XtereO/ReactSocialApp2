{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","HOCS/withCheckAuth.js","Article/Main/Post.tsx","Bricks/Textarea.js","Article/Main/MainHooks.js","Redux/Selectors/mainSelector.js","Article/Main/ContainerMain.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","WithCheckAuth","Component","connect","state","isAuth","menu","props","to","Post","doLike","name","message","like","className","src","img","onClick","deletePost","ableLike","Textarea","input","meta","hasError","touched","error","maxLength","maxLengthCreator","MainReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","requiredField","Main","userId","match","params","useEffect","myId","setAccountThunk","getStatusThunk","setAccount","isMyPage","useState","isEditMode","setMode","toOff","setStatusThunk","status","Account","Loader","posts","map","e","fullName","photos","large","autoFocus","onBlur","onChange","changeStatus","target","onDoubleClick","aboutMe","lookingForAJob","descriptionJob","contacts","keys","key","href","doPost","text","getAccount","mainPage","Property","getText","getPosts","getStatus","getMyId","data","id","compose","withRouter","changeText","MainHooks"],"mappings":"sJAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,4DIcvFC,IAhBG,SAACC,GAaf,OAAOC,aALa,SAACC,GACjB,MAAM,CACFC,OAAOD,EAAME,KAAKD,UAGK,GAAxBF,EAXW,SAACI,GACf,OAAIA,EAAMF,OAGH,cAACH,EAAD,IAFI,cAAC,IAAD,CAAUM,GAAG,gB,4FC+CjBC,EAzCc,SAACF,GAC1B,IAAIG,EAAO,WACP,OAAOH,EAAMG,OAAOH,EAAMI,KAAKJ,EAAMK,QAAQL,EAAMM,OAKvD,OAAM,qBAAKC,UAAU,OAAf,SACF,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,oBAAoBC,IAAKR,EAAMS,IAAMT,EAAMS,IAAM,wGAEpE,sBAAKF,UAAU,YAAf,UAEI,qBAAKA,UAAU,QAAf,SACI,wBAAQA,UAAU,YAAYG,QAZnC,WACX,OAAOV,EAAMW,WAAWX,EAAMI,KAAKJ,EAAMK,QAAQL,EAAMM,WAe3C,oBAAIC,UAAU,OAAd,SAAsBP,EAAMI,OAE5B,qBAAKG,UAAU,YAAf,SACKP,EAAMK,UAEX,sBAAKE,UAAU,QAAf,UACKP,EAAMY,SAAW,wBAAQF,QAASP,EAAQI,UAAU,yBAAnC,kBAIlB,wBAAQG,QAASP,EAAQI,UAAU,iBAAnC,kBAGA,sBAAMA,UAAU,oBAAhB,SAAqCP,EAAMM,qB,yCCpCpDO,EATF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,KAASf,EAAS,gCAC/BgB,EAASD,EAAKE,SAAWF,EAAKG,MAClC,OAAM,gCACF,kDAAUX,UAAWS,EAAW,2BAA6B,gBACzDF,GAAWd,IACf,sBAAMO,UAAU,cAAhB,SAA+BS,GAAYD,EAAKG,Y,gBCEpDC,EAAUC,YAAiB,KAoJ3BC,EAAcC,YAAU,CAACC,KAAK,WAAhBD,EAXL,SAACtB,GACV,OAAM,sBAAMwB,SAAUxB,EAAMyB,aAAtB,SACF,sBAAKlB,UAAU,YAAf,sBACa,wBAAQA,UAAU,wBAAlB,kBACT,cAACmB,EAAA,EAAD,CAAOtB,KAAM,OAAQuB,UAAWd,EAC/Be,YAAY,MACbC,SAAU,CAACC,IAAcX,aAOtBY,EApJN,SAAC/B,GAEN,IAAIgC,EAAOhC,EAAMiC,MAAMC,OAAOF,OAE9BG,qBAAU,WAMN,OALIH,IACAA,EAAOhC,EAAMoC,MAEjBpC,EAAMqC,gBAAgBL,GACtBhC,EAAMsC,eAAeN,GACf,WACFhC,EAAMuC,WAAW,SAEvB,IAEF,IAAIC,GAAWR,EAfD,EAiBaS,oBAAS,GAjBtB,mBAiBTC,EAjBS,KAiBEC,EAjBF,KAsBVC,EAAM,WACND,GAAQ,GACR3C,EAAM6C,eAAe7C,EAAM8C,SAG/B,IAAI9C,EAAM+C,QACN,OAAO,cAACC,EAAA,EAAD,IAGX,IAAIC,EAAMjD,EAAMiD,MACC,GAAdA,EAAM3D,SACL2D,EAAOA,EAAMC,KAAI,SAAAC,GACb,OAAO,cAAC,EAAD,CAAM9C,QAAS8C,EAAE9C,QAASI,IAAK0C,EAAE1C,IACpCL,KAAM+C,EAAE/C,KAAMD,OAAQH,EAAMG,OAC5BG,KAAM6C,EAAE7C,KAAMM,SAAUuC,EAAEvC,SAC1BD,WAAYX,EAAMW,iBAI9B,IAIIP,EAAKJ,EAAM+C,QAAQK,SACnB3C,EAAIT,EAAM+C,QAAQM,OAAOC,MACxB7C,IACDA,EAAI,mFAMR,OAAM,gCACF,qBAAKF,UAAU,OAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,oBAAoBC,IAAKC,MAE5C,qBAAKF,UAAU,WAAf,SACA,sBAAKA,UAAU,YAAf,UACA,qBAAIA,UAAU,YAAd,UAA2BH,EACvB,qBAAKG,UAAU,QAAf,SACKiC,GACD,wBAAQjC,UAAU,kBAAlB,SACI,cAAC,IAAD,CAASA,UAAU,kBAAkBN,GAAG,OAAxC,iCAOR,sBAAKM,UAAU,cAAf,oBAEKiC,EACGE,EACA,sBAAKnC,UAAU,SAAf,UACI,uBAAOgD,WAAW,EAAOC,OAAQZ,EAAOa,SArCnD,SAACN,GACdnD,EAAM0D,aAAaP,EAAEQ,OAAOtE,QAqCJkB,UAAU,eAAelB,MAAOW,EAAM8C,SACtC,wBAAQpC,QAASkC,EAAOrC,UAAU,wBAAlC,oBAKJ,sBAAMqD,cAlEjB,WACTjB,GAAQ,IAiEY,SACM3C,EAAM8C,OAGR9C,EAAM8C,OAFN,2BAMJ9C,EAAM+C,QAAQc,WAGtB,qBAAItD,UAAU,aAAd,UACI,qBAAIA,UAAU,yBAAd,+BACuBP,EAAM+C,QAAQe,eAAiB,QAAU,QAEhE,qBAAIvD,UAAU,yBAAd,6BACqBP,EAAM+C,QAAQgB,eAAiB/D,EAAM+C,QAAQgB,eAAiB,iBAEnF,qBAAIxD,UAAU,yBAAd,sBACcP,EAAM+C,QAAQc,QAAU7D,EAAM+C,QAAQc,QAAU,mBAE9D,oBAAItD,UAAU,kBAAd,SACI,oCACI,+CAGA,oBAAIA,UAAU,aAAd,SACHP,EAAM+C,QAAQiB,UAAYtF,OAAOuF,KAAKjE,EAAM+C,QAAQiB,UAAUd,KAAI,SAAAgB,GAC/D,OAAM,qBAAI3D,UAAU,kBAAd,UAA2C2D,EAA3C,IACN,mBAAG3D,UAAU,OAAOoD,OAAO,SAASQ,KAAMnE,EAAM+C,QAAQiB,SAASE,GAAjE,SACClE,EAAM+C,QAAQiB,SAASE,OAFmBA,0BAYnE,qBAAK3D,UAAU,iBAAf,SACI,cAACc,EAAD,CAAeG,SA3EZ,SAACnC,GACRW,EAAMoE,OAAO/E,EAAMgF,WA4EnB,8BACGpB,Q,iBC1IAqB,EAAW,SAACzE,GACnB,OAAOA,EAAM0E,SAASC,SAASzB,SAGxB0B,EAAQ,SAAC5E,GAChB,OAAOA,EAAM0E,SAASC,SAASH,MAGxBK,EAAS,SAAC7E,GACjB,OAAOA,EAAM0E,SAASC,SAASvB,OAGxB0B,EAAU,SAAC9E,GAClB,OAAOA,EAAM0E,SAASC,SAAS1B,QAGxB8B,EAAQ,SAAC/E,GAChB,OAAOA,EAAME,KAAK8E,KAAKC,ICsBZC,sBACXrF,IACAsF,IACApF,aAbgB,SAACC,GACjB,MAAM,CACNkD,QAAQuB,EAAWzE,GACnBwE,KAAKI,EAAQ5E,GACboD,MAAMyB,EAAS7E,GACfiD,OAAO6B,EAAU9E,GACjBuC,KAAKwC,EAAQ/E,MAOwD,CACjE6D,iBAAauB,eAAW3C,mBACxB8B,WAAOjE,WAAOoC,eAAWF,oBACzBQ,mBAAelC,iBANRoE,CAQbG","file":"static/js/6.330628fe.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet WithCheckAuth=(Component)=>{\r\n\r\n    let WrapComponent=(props)=>{\r\n        if(!props.isAuth){\r\n            return <Redirect to=\"/Login\" />\r\n        }\r\n        return <Component/>\r\n    }\r\n    let mapStateToProps=(state)=>{\r\n        return{\r\n            isAuth:state.menu.isAuth\r\n        }\r\n    }\r\n    return connect(mapStateToProps,{})(WrapComponent)\r\n}\r\n\r\nexport default WithCheckAuth","import { NavLink } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype PropsType={\r\n  doLike:(name:string,message:string,like:number)=>void\r\n  deletePost:(name:string,message:string,like:number)=>void\r\n  img:string | null\r\n  name:string\r\n  message:string\r\n  like:number\r\n  ableLike:boolean\r\n}\r\n\r\nlet Post:React.FC<PropsType>=(props)=>{\r\n    let doLike=()=>{\r\n        return props.doLike(props.name,props.message,props.like)\r\n    }\r\n    let deletePost=()=>{\r\n        return props.deletePost(props.name,props.message,props.like)\r\n    }\r\n    return<div className=\"mt-2\">\r\n        <div className=\"card\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-2\">\r\n                    <img className=\"img w-100 rounded\" src={props.img ? props.img : \"https://yt3.ggpht.com/ytc/AAUvwniy7j4PC5ul7yauPrWqVsh5f4FfNtbWT5k3n6kj=s900-c-k-c0x00ffffff-no-rj\"}/>\r\n                </div>\r\n                <div className=\"col-md-10\">\r\n\r\n                    <div className=\"right\">\r\n                        <button className=\"btn-close\" onClick={deletePost}>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h1 className=\"Link\">{props.name}</h1>\r\n\r\n                    <div className=\"card-body\">\r\n                        {props.message}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {props.ableLike ? <button onClick={doLike} className=\"btn btn-outline-danger\">\r\n                            like\r\n                        </button>\r\n                        :\r\n                        <button onClick={doLike} className=\"btn btn-danger\">\r\n                            like\r\n                        </button>}\r\n                        <span className=\"badge likeBg mx-2\">{props.like}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post\r\n","\r\nlet Textarea=({input,meta, ...props})=>{\r\n    let hasError=meta.touched && meta.error\r\n    return<div>\r\n        <textarea className={hasError ? \"form-control  is-invalid\" : \"form-control\"} \r\n        {...input} {...props}  />\r\n        <span className=\"text-danger\">{hasError && meta.error}</span>\r\n    </div>\r\n}\r\n\r\nexport default Textarea","import Post from \"./Post\";\r\nimport Loader from \"../../Loader\";\r\nimport React,{useState,useEffect} from \"react\";\r\nimport {Field,reduxForm} from \"redux-form\"\r\nimport Textarea from \"../../Bricks/Textarea\";\r\nimport { requiredField,maxLengthCreator } from \"../../Validates/ValidateForText\";\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nlet maxLength=maxLengthCreator(100000)\r\n\r\nlet Main=(props)=>{\r\n\r\n    let userId=props.match.params.userId\r\n\r\n    useEffect(()=>{\r\n        if(!userId){\r\n            userId=props.myId\r\n        }\r\n        props.setAccountThunk(userId)\r\n        props.getStatusThunk(userId)\r\n        return()=>{\r\n            props.setAccount(null)\r\n        }\r\n    },[])\r\n\r\n    let isMyPage=(!userId)\r\n\r\n    let [isEditMode,setMode] = useState(false)\r\n\r\n    let toActive=()=>{\r\n        setMode(true)\r\n    }\r\n    let toOff=()=>{\r\n        setMode(false)\r\n        props.setStatusThunk(props.status)\r\n    }\r\n\r\n    if(!props.Account){\r\n        return <Loader />\r\n    }\r\n\r\n    let posts=props.posts\r\n    if(posts.length!=0){\r\n        posts =posts.map(e=>{\r\n            return <Post message={e.message} img={e.img}\r\n                name={e.name} doLike={props.doLike}\r\n                like={e.like} ableLike={e.ableLike}\r\n                deletePost={props.deletePost}/>\r\n        })\r\n    }\r\n\r\n    let changeStatus=(e)=>{\r\n        props.changeStatus(e.target.value)\r\n    }\r\n\r\n    let name=props.Account.fullName;\r\n    let img=props.Account.photos.large;\r\n    if (!img){\r\n        img=\"https://aachibilyaev.com/upload/iblock/c97/c970fbccb33a1923f4af631366566199.png\"\r\n    }\r\n\r\n    let doPost=(value)=>{\r\n        props.doPost(value.text)\r\n    }\r\n    return<div>\r\n        <div className=\"card\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <img className=\"img w-100 rounded\" src={img} />\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                <div className=\"card-body\">\r\n                <h1 className=\"Link my-2\">{name}\r\n                    <div className=\"right\">\r\n                        {isMyPage &&\r\n                        <button className=\"btn btn-primary\">\r\n                            <NavLink className=\"text-light Link\" to=\"Edit\">\r\n                                Edit Profile\r\n                            </NavLink>\r\n                        </button>\r\n                        }\r\n                    </div>\r\n                </h1>\r\n                    <div className=\"d-flex my-2\">\r\n                        Status:\r\n                        {isMyPage ?\r\n                            isEditMode ?\r\n                            <div className=\"d-flex\">\r\n                                <input autoFocus={true}  onBlur={toOff} onChange={changeStatus}\r\n                                className=\"form-control\" value={props.status}/>\r\n                                <button onClick={toOff} className=\"btn btn-success right\">\r\n                                    \\/\r\n                                </button>\r\n                            </div>\r\n                            :\r\n                            <span onDoubleClick={toActive}>\r\n                                {!props.status?\r\n                                \"click to change status\"\r\n                                :\r\n                                props.status\r\n                                }\r\n                            </span>\r\n                        :\r\n                            props.Account.aboutMe\r\n                        }\r\n                    </div>\r\n                    <ul className=\"list-group\">\r\n                        <li className=\"list-group-item d-flex\">\r\n                            looking for a job:{props.Account.lookingForAJob ? \" Yes \" : \"No\"}\r\n                        </li>\r\n                        <li className=\"list-group-item d-flex\">\r\n                            Description job:{props.Account.descriptionJob ? props.Account.descriptionJob : \"I dont know\"}\r\n                        </li>\r\n                        <li className=\"list-group-item d-flex\">\r\n                            About me:{props.Account.aboutMe ? props.Account.aboutMe : \"Just no name)\"}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <details>\r\n                                <summary>\r\n                                    Contacts\r\n                                </summary>\r\n                                <ul className=\"list-group\">\r\n                            {props.Account.contacts && Object.keys(props.Account.contacts).map(key=>{\r\n                                return<li className=\"list-group-item\" key={key}>{key}:\r\n                                <a className=\"Link\" target=\"_blank\" href={props.Account.contacts[key]}>\r\n                                {props.Account.contacts[key]}</a></li>\r\n                            })}\r\n                                </ul>\r\n                            </details>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"card mt-2 mb-2\">\r\n            <MainReduxForm onSubmit={doPost}/>\r\n        </div>\r\n        <div>\r\n          {posts}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nlet MainForm=(props)=>{ \r\n    return<form onSubmit={props.handleSubmit}>\r\n        <div className=\"card-body\">\r\n            What new?<button className=\"btn btn-success right\">Post</button>\r\n            <Field name={\"text\"} component={Textarea}\r\n             placeholder=\"...\"\r\n            validate={[requiredField,maxLength]}/>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nlet MainReduxForm=reduxForm({form:\"forPost\"})(MainForm)\r\n\r\nexport default Main\r\n","\r\nexport let getAccount=(state)=>{\r\n    return state.mainPage.Property.Account\r\n}\r\n\r\nexport let getText=(state)=>{\r\n    return state.mainPage.Property.text\r\n}\r\n\r\nexport let getPosts=(state)=>{\r\n    return state.mainPage.Property.posts\r\n}\r\n\r\nexport let getStatus=(state)=>{\r\n    return state.mainPage.Property.status\r\n}\r\n\r\nexport let getMyId=(state)=>{\r\n    return state.menu.data.id\r\n}","import { connect } from \"react-redux\";\r\nimport {setStatusThunk,deletePost,getStatusThunk,setAccountThunk,changeStatus,changeText,doPost, doLike, setAccount} from \"../../Redux/Reducers/reduceMain\"\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Main from \"./Main\"\r\nimport MainHooks from \"./MainHooks\";\r\nimport WithCheckAuth from \"../../HOCS/withCheckAuth\";\r\nimport { compose } from \"redux\";\r\nimport { getAccount, getMyId, getPosts, getStatus, getText } from \"../../Redux/Selectors/mainSelector\";\r\nimport { AccountType } from \"../../Types/types\";\r\nimport { AppStateType } from \"../../Redux/Redux\";\r\n\r\ntype MSTPType={\r\n  Account:AccountType\r\n  text:string\r\n  posts:any //its array with jsx\r\n  status:string\r\n  myId:number | null\r\n}\r\ntype MDTPType={\r\n  changeStatus:(t:string)=>void\r\n  changeText:(t:string | null)=>void\r\n  getStatusThunk:(id:number)=>void\r\n  doPost:(text:string | null)=>void\r\n  doLike:(name:string | null,message:string | null,like:number)=>void\r\n  setAccount:(data:AccountType )=>void\r\n  setAccountThunk:(userId:number)=>void\r\n  setStatusThunk:(status:string )=>void\r\n  deletePost:(name:string | null,message:string | null,like:number)=>void\r\n}\r\ntype OwnPropsType={}\r\nlet mapStateToProps=(state:AppStateType):MSTPType=>{\r\n    return{\r\n    Account:getAccount(state),\r\n    text:getText(state),\r\n    posts:getPosts(state),\r\n    status:getStatus(state),\r\n    myId:getMyId(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    WithCheckAuth,\r\n    withRouter,\r\n    connect<MSTPType,MDTPType,OwnPropsType,AppStateType>(mapStateToProps,{\r\n        changeStatus,changeText,getStatusThunk,\r\n        doPost,doLike,setAccount,setAccountThunk,\r\n        setStatusThunk,deletePost\r\n    })\r\n)(MainHooks)\r\n"],"sourceRoot":""}