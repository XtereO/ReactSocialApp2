{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Article/GlobalChat/SingleMessage.tsx","Article/GlobalChat/Chat.tsx","Article/GlobalChat/ChatInput.tsx","Article/GlobalChat/GlobalChat.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","SingleMessage","props","style","height","className","to","userId","src","photo","userName","message","Chat","messages","map","m","ChatInput","dispatch","useDispatch","isInit","useSelector","state","chat","enableReinitialize","initialValues","text","onSubmit","values","resetForm","sendMessage","handleSubmit","handleChange","onChange","name","disabled","GlobalChat","React","memo","useEffect","messageStartListhening","messageStopListhening","useState","isAutoScroll","setAutoScroll","messageAnchorRef","useRef","current","scrollIntoView","behavior","overflowX","overflowY","onScroll","e","element","currentTarget","diff","Math","abs","scrollHeight","scrollTop","clientHeight","ref","maxHeight","overflow"],"mappings":"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","file":"static/js/8.c104e94b.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { MessageType } from \"./GlobalChat\"\r\n\r\n\r\n\r\nexport let SingleMessage:React.FC<MessageType>=(props)=>{\r\n    return<div style={{height:'20%'}} className=\"mt-3\">\r\n        <div className=\"row bg-light p-2\" >\r\n            <div className=\"col-2\">\r\n                <NavLink to={`Main/${props.userId}`}>\r\n                <img src={props.photo}\r\n                className=\"w-100 rounded\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div className=\"col-8 my-3\">\r\n                    <h3>\r\n                        <NavLink to={`Main/${props.userId}`} className=\"Link\">\r\n                        {props.userName}\r\n                        </NavLink>\r\n                    </h3>\r\n                <div className=\"text-dark mt-4\">\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport { ChatType } from \"./GlobalChat\";\r\nimport { SingleMessage } from \"./SingleMessage\";\r\n\r\nexport let Chat:React.FC<ChatType>=(props)=>{\r\n    let messages=props.messages.map(m=><SingleMessage \r\n    photo={m.photo} userName={m.userName} userId={m.userId}\r\n    message={m.message} key={m.userName+m.message}/>)\r\n    return<div>\r\n        {messages}\r\n    </div>\r\n}\r\n","import { Formik, FormikState } from \"formik\"\r\nimport React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { sendMessage } from \"../../Redux/Reducers/chatReducer\"\r\nimport { AppStateType } from \"../../Redux/Redux\";\r\n\r\n\r\n\r\n\r\ntype PropsType={\r\n}\r\nexport let ChatInput:React.FC<PropsType>=(props)=>{\r\n    \r\n    const dispatch=useDispatch()\r\n    const isInit=useSelector((state:AppStateType)=>state.chat.isInit)\r\n    return<Formik\r\n    enableReinitialize\r\n    initialValues={{text:\"\"}}\r\n    onSubmit={(values,{resetForm})=>{\r\n        if (!values.text){\r\n            return\r\n        }\r\n\r\n        dispatch(sendMessage(values.text))\r\n        resetForm()\r\n    }}>\r\n        {({\r\n            values,\r\n            handleSubmit,\r\n            handleChange\r\n        })=>{\r\n            return<div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <textarea className=\r\n                        {`w-100 form-control${isInit ? \"\" : \" is-invalid\"}`}  \r\n                        onChange={handleChange} name=\"text\" value={values.text}>\r\n                        </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button disabled={!isInit} \r\n                         className=\"w-100 btn btn-success btnInMessage\">\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        }}\r\n    </Formik>\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { messageStartListhening, messageStopListhening } from \"../../Redux/Reducers/chatReducer\";\r\nimport { Chat } from \"./Chat\";\r\nimport { ChatInput } from \"./ChatInput\";\r\nimport { AppStateType } from \"../../Redux/Redux\";\r\n\r\nexport type MessageType={\r\n    message:string\r\n    photo:string\r\n    userId:number\r\n    userName:string\r\n}\r\n\r\n\r\nlet GlobalChat=React.memo(()=>{\r\n\r\n    const dispatch=useDispatch()\r\n    let messages=useSelector((state:AppStateType)=>{\r\n        return state.chat.messages\r\n    })\r\n\r\n    useEffect(()=>{\r\n        dispatch(messageStartListhening())\r\n        return(()=>{\r\n            dispatch(messageStopListhening())\r\n        })\r\n    },[])\r\n\r\n    let [isAutoScroll,setAutoScroll]=useState(true)\r\n    let messageAnchorRef=useRef<HTMLDivElement>(null);\r\n\r\n    const scrollHandler=(e:React.UIEvent<HTMLDivElement,UIEvent>)=>{\r\n        const element=e.currentTarget\r\n        let diff=Math.abs(element.scrollHeight - element.scrollTop-element.clientHeight)\r\n        if (diff<300){\r\n            setAutoScroll(true)\r\n        }\r\n        else{\r\n            setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (isAutoScroll){\r\n            messageAnchorRef.current?.scrollIntoView({behavior:'smooth'})\r\n        }\r\n    },[messages])\r\n\r\n\r\n    return<div style={{height:'700px'}}>\r\n        <div>\r\n            <div style={{overflowX:\"hidden\",overflowY:\"scroll\",height:550}}\r\n            onScroll={scrollHandler}>\r\n                <Chat messages={messages} />\r\n                <div ref={messageAnchorRef}/>\r\n            </div>\r\n            <div className=\"mt-4 w-100\" style={{maxHeight:100,overflow:'hidden'}}>\r\n                <ChatInput/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n})\r\nexport type ChatType={\r\n    messages:MessageType[]\r\n}\r\n\r\n\r\nexport default GlobalChat\r\n\r\nfunction withCheckAuth(arg0: () => JSX.Element): any {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n"],"sourceRoot":""}