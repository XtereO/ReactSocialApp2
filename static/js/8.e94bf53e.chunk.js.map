{"version":3,"sources":["HOCS/withCheckAuth.js","Article/Message/singleMessage.tsx","Article/Message/People.tsx","Bricks/TextareaUp.js","Article/Message/Message.js","Redux/Selectors/messageSelector.js","Article/Message/ContainerMessage.tsx"],"names":["WithCheckAuth","Component","connect","state","isAuth","menu","props","to","singleMessage","className","name","message","People","p","id","onClick","changeDialog","count","TextareaUp","input","meta","hasError","error","touched","Message","userId","this","match","params","peopleData","map","newM","messageData","key","m","curMessage","img","push","MessageReduxForm","onSubmit","value","doMessage","text","React","maxLength300","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","placeholder","validate","requiredField","getPeopleData","messagePage","Property","getMessageData","getCurDialog","curDialog","compose","withCheckAuth","withRouter"],"mappings":"mIAmBeA,IAhBG,SAACC,GAaf,OAAOC,aALa,SAACC,GACjB,MAAM,CACFC,OAAOD,EAAME,KAAKD,UAGK,GAAxBF,EAXW,SAACI,GACf,OAAIA,EAAMF,OAGH,cAACH,EAAD,IAFI,cAAC,IAAD,CAAUM,GAAG,gB,4GCejBC,EAfuB,SAACF,GACnC,OAAM,8BACF,qBAAKG,UAAU,iBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,6BACKH,EAAMI,OAEX,qBAAKD,UAAU,YAAf,SACKH,EAAMK,kB,QCSZC,EAdgB,SAACN,GAE5B,IAAIO,EAAE,YAAYP,EAAMQ,GAIxB,OAAM,8BACF,oBAAIL,UAAU,kBAAkBM,QAJnB,WACbT,EAAMU,aAAaV,EAAMQ,KAGzB,SACI,eAAC,IAAD,CAASL,UAAU,OAAOF,GAAIM,EAA9B,UAAkCP,EAAMI,KACxC,qBAAKD,UAAU,cAAf,SAA8BH,EAAMW,gB,iCCLjCC,EAbA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,KAASd,EAAS,gCACjCe,EAASD,EAAKE,OAASF,EAAKG,QAChC,OAAM,gCACF,qBAAKd,UAAU,cAAf,SACKY,GAAYD,EAAKE,QAEtB,8BACI,kDAAUb,UAAWY,EAAW,0BAA4B,gBACxDF,GAAWb,U,QCFrBkB,E,uKACO,IAAD,OACJC,EAAOC,KAAKpB,MAAMqB,MAAMC,OAAOH,OAC9BA,IACDA,EAAO,GAEX,IAIII,EAAWH,KAAKpB,MAAMuB,WAAWC,KAAI,SAACjB,GACtC,OAAM,cAAC,EAAD,CAAQG,aAAc,EAAKV,MAAMU,aAAcN,KAAMG,EAAEH,KAAMO,MAAOJ,EAAEkB,KAAMjB,GAAID,EAAEC,QAExFkB,EAAY,GAChB,IAAK,IAAIC,KAAOP,KAAKpB,MAAM0B,YAAY,CACnC,IAAIE,EAAER,KAAKpB,MAAM0B,YAAYC,GAC7B,GAAGC,EAAEpB,IAAIW,EAAO,CACZ,IAAIU,EAAW,cAAC,EAAD,CAAezB,KAAMwB,EAAExB,KACtCC,QAASuB,EAAEvB,QAASyB,IAAKF,EAAEE,MAC3BJ,EAAYK,KAAKF,IAGzB,OAAM,8BACN,sBAAK1B,UAAU,iBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,6BACKoB,MAIT,sBAAKpB,UAAU,WAAf,UACKuB,EACD,cAACM,EAAD,CAAkBC,SA1BZ,SAACC,GACX,EAAKlC,MAAMmC,UAAUhB,EAAOe,EAAME,qB,GAPpBC,IAAM1C,WAuCxB2C,EAAaC,YAAiB,KAgB9BP,EAAiBQ,YAAU,CAACC,KAAK,cAAhBD,EAdL,SAACxC,GACb,OAAM,uBAAMiC,SAAUjC,EAAM0C,aAAtB,UACF,qBAAKvC,UAAU,aAAf,SACI,cAACwC,EAAA,EAAD,CAAOC,UAAWhC,EAAYiC,YAAY,MAC1CC,SAAU,CAACC,IAAcT,GACzBlC,KAAM,WAEV,8BACI,wBAAQD,UAAU,+CAQfe,I,iCC/DJ8B,EAAc,SAACnD,GACtB,OAAOA,EAAMoD,YAAYC,SAAS3B,YAG3B4B,EAAe,SAACtD,GACvB,OAAOA,EAAMoD,YAAYC,SAASxB,aAG3B0B,EAAa,SAACvD,GACrB,OAAOA,EAAMoD,YAAYC,SAASG,WCiBvBC,sBACXC,IACAC,IACA5D,aAVgB,SAACC,GACjB,MAAM,CACF0B,WAAWyB,EAAcnD,GACzB6B,YAAYyB,EAAetD,GAC3BwD,UAAUD,EAAavD,MAMsC,CAACsC,cAClEzB,mBAJW4C,CAKbpC","file":"static/js/8.e94bf53e.chunk.js","sourcesContent":["import { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet WithCheckAuth=(Component)=>{\r\n\r\n    let WrapComponent=(props)=>{\r\n        if(!props.isAuth){\r\n            return <Redirect to=\"/Login\" />\r\n        }\r\n        return <Component/>\r\n    }\r\n    let mapStateToProps=(state)=>{\r\n        return{\r\n            isAuth:state.menu.isAuth\r\n        }\r\n    }\r\n    return connect(mapStateToProps,{})(WrapComponent)\r\n}\r\n\r\nexport default WithCheckAuth","import React from \"react\";\r\n\r\ntype PropsType={\r\n  name:string\r\n  message:string\r\n}\r\n\r\nlet singleMessage:React.FC<PropsType>=(props)=>{\r\n    return<div>\r\n        <div className=\"card row mt-2 \">\r\n            <div className=\"container\">\r\n                <h1>\r\n                    {props.name}\r\n                </h1>\r\n                <div className=\"card-body\">\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default singleMessage\r\n","import { NavLink } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype PropsType={\r\n  name:string\r\n  count:number\r\n  changeDialog:(id:number)=>void\r\n  id:number\r\n}\r\n\r\nlet People:React.FC<PropsType>=(props)=>{\r\n\r\n    let p=\"/Message/\"+props.id\r\n    let changeDialog=()=>{\r\n        props.changeDialog(props.id)\r\n    }\r\n    return<div>\r\n        <li className=\"list-group-item\" onClick={changeDialog}>\r\n            <NavLink className=\"Link\" to={p}>{props.name}\r\n            <div className=\"right badge\">{props.count}</div></NavLink>\r\n        </li>\r\n    </div>\r\n}\r\n\r\nexport default People\r\n","\r\nlet TextareaUp=({input,meta, ...props})=>{\r\n    let hasError=meta.error && meta.touched\r\n    return<div>\r\n        <div className=\"text-danger\">\r\n            {hasError && meta.error}\r\n        </div>\r\n        <div>\r\n            <textarea className={hasError ? \"form-control is-invalid\" : \"form-control\"} \r\n            {...input} {...props}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default TextareaUp","import SingleMessage from \"./singleMessage\";\r\nimport People from \"./People\";\r\nimport React from \"react\";\r\nimport { reduxForm,Field } from \"redux-form\";\r\nimport TextareaUp from \"../../Bricks/TextareaUp\";\r\nimport { maxLengthCreator, requiredField } from \"../../Validates/ValidateForText\";\r\n\r\nclass Message extends React.Component{\r\n    render(){\r\n    let userId=this.props.match.params.userId\r\n    if (!userId){\r\n        userId=1\r\n    }\r\n    let doMessage=(value)=>{\r\n        this.props.doMessage(userId,value.text)\r\n    }\r\n\r\n    let peopleData=this.props.peopleData.map((p)=>{\r\n        return<People changeDialog={this.props.changeDialog} name={p.name} count={p.newM} id={p.id}/>\r\n    })\r\n    let messageData=[];\r\n    for (let key in this.props.messageData){        \r\n        let m=this.props.messageData[key]\r\n        if(m.id==userId){\r\n            let curMessage=<SingleMessage name={m.name} \r\n            message={m.message} img={m.img}/>\r\n            messageData.push(curMessage)\r\n        }\r\n    }\r\n    return<div>\r\n    <div className=\"ForMessage row\">\r\n        <div className=\"col-md-3\">\r\n            <ul>\r\n                {peopleData}\r\n            </ul>\r\n        </div>\r\n\r\n        <div className=\"col-md-9\">\r\n            {messageData}\r\n            <MessageReduxForm onSubmit={doMessage}/>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    }\r\n}\r\n\r\nlet maxLength300=maxLengthCreator(300)\r\n\r\nlet MessageForm=(props)=>{\r\n    return<form onSubmit={props.handleSubmit}>\r\n        <div className=\"w-100 mt-2\">\r\n            <Field component={TextareaUp} placeholder=\"...\"\r\n            validate={[requiredField,maxLength300]}\r\n            name={\"text\"}/>\r\n        </div>\r\n        <div>\r\n            <button className=\"btn btn-success w-100 btnInMessage\">\r\n            </button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nlet MessageReduxForm=reduxForm({form:\"forMessage\"})(MessageForm)\r\n\r\nexport default Message","\r\nexport let getPeopleData=(state)=>{\r\n    return state.messagePage.Property.peopleData\r\n}\r\n\r\nexport let getMessageData=(state)=>{\r\n    return state.messagePage.Property.messageData\r\n} \r\n\r\nexport let getCurDialog=(state)=>{\r\n    return state.messagePage.Property.curDialog\r\n}","import withCheckAuth from \"../../HOCS/withCheckAuth\";\r\nimport Message from \"./Message\";\r\nimport { connect } from \"react-redux\";\r\nimport { doMessage,changeDialog } from \"../../Redux/Reducers/reduceMessage\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { getCurDialog, getPeopleData,getMessageData } from \"../../Redux/Selectors/messageSelector\";\r\nimport React from \"react\";\r\nimport { AppStateType } from \"../../Redux/Redux\";\r\n\r\ntype OwnProps={}\r\ntype MDTPType={\r\n  doMessage:(p:string,text:string)=>void\r\n  changeDialog:(curDialog:number)=>void\r\n}\r\ntype MSTPType={\r\n  peopleData:any // Array with jsx\r\n  messageData:any // Array with jsx\r\n  curDialog:number\r\n}\r\nlet mapStateToProps=(state:AppStateType):MSTPType=>{\r\n    return{\r\n        peopleData:getPeopleData(state),\r\n        messageData:getMessageData(state),\r\n        curDialog:getCurDialog(state)\r\n    }\r\n}\r\nexport default compose(\r\n    withCheckAuth,\r\n    withRouter,\r\n    connect<MSTPType,MDTPType,OwnProps,AppStateType>(mapStateToProps,{doMessage,\r\n    changeDialog})\r\n)(Message)\r\n"],"sourceRoot":""}